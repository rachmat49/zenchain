// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: auction/order.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Order struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id         uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Denomid    string `protobuf:"bytes,3,opt,name=denomid,proto3" json:"denomid,omitempty"`
	Tokenid    string `protobuf:"bytes,4,opt,name=tokenid,proto3" json:"tokenid,omitempty"`
	Startprice string `protobuf:"bytes,5,opt,name=startprice,proto3" json:"startprice,omitempty"`
	Stepprice  string `protobuf:"bytes,6,opt,name=stepprice,proto3" json:"stepprice,omitempty"`
	Starttime  string `protobuf:"bytes,7,opt,name=starttime,proto3" json:"starttime,omitempty"`
	Duration   string `protobuf:"bytes,8,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_c253d099a141f0d7, []int{0}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return m.Size()
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Order) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Order) GetDenomid() string {
	if m != nil {
		return m.Denomid
	}
	return ""
}

func (m *Order) GetTokenid() string {
	if m != nil {
		return m.Tokenid
	}
	return ""
}

func (m *Order) GetStartprice() string {
	if m != nil {
		return m.Startprice
	}
	return ""
}

func (m *Order) GetStepprice() string {
	if m != nil {
		return m.Stepprice
	}
	return ""
}

func (m *Order) GetStarttime() string {
	if m != nil {
		return m.Starttime
	}
	return ""
}

func (m *Order) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func init() {
	proto.RegisterType((*Order)(nil), "zenchainprotocol.zenchain.auction.Order")
}

func init() { proto.RegisterFile("auction/order.proto", fileDescriptor_c253d099a141f0d7) }

var fileDescriptor_c253d099a141f0d7 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x3f, 0x4e, 0xc3, 0x30,
	0x18, 0xc5, 0xe3, 0xd0, 0xbf, 0x1e, 0x18, 0x0c, 0x83, 0x55, 0x21, 0xab, 0x30, 0x75, 0x4a, 0x06,
	0x38, 0x01, 0x07, 0x00, 0xa9, 0x23, 0x9b, 0x6b, 0x5b, 0xa9, 0x05, 0xc9, 0x17, 0x39, 0x5f, 0x24,
	0xe0, 0x14, 0x1c, 0x8b, 0xb1, 0x23, 0x0b, 0x12, 0x4a, 0x2e, 0x82, 0x6c, 0x27, 0x05, 0x75, 0xf3,
	0xfb, 0xfd, 0x9e, 0x2d, 0xf9, 0xd1, 0x0b, 0xd9, 0x2a, 0xb4, 0x50, 0xe5, 0xe0, 0xb4, 0x71, 0x59,
	0xed, 0x00, 0x81, 0x5d, 0xbf, 0x9b, 0x4a, 0xed, 0xa5, 0xad, 0x42, 0x54, 0xf0, 0x92, 0x8d, 0x20,
	0x1b, 0xea, 0xab, 0xcb, 0x02, 0x0a, 0x08, 0x3a, 0xf7, 0xa7, 0x78, 0xf1, 0xe6, 0x9b, 0xd0, 0xe9,
	0xa3, 0x7f, 0x88, 0x71, 0x3a, 0x57, 0xce, 0x48, 0x04, 0xc7, 0xc9, 0x9a, 0x6c, 0x96, 0xdb, 0x31,
	0xb2, 0x73, 0x9a, 0x5a, 0xcd, 0xd3, 0x35, 0xd9, 0x4c, 0xb6, 0xa9, 0xd5, 0xbe, 0xa9, 0x4d, 0x05,
	0xa5, 0xd5, 0xfc, 0x2c, 0x36, 0x87, 0xe8, 0x0d, 0xc2, 0xb3, 0xa9, 0xac, 0xe6, 0x93, 0x68, 0x86,
	0xc8, 0x04, 0xa5, 0x0d, 0x4a, 0x87, 0xb5, 0xb3, 0xca, 0xf0, 0x69, 0x90, 0xff, 0x08, 0xbb, 0xa2,
	0xcb, 0x06, 0x4d, 0x1d, 0xf5, 0x2c, 0xe8, 0x3f, 0x10, 0xad, 0x74, 0x88, 0xb6, 0x34, 0x7c, 0x3e,
	0xda, 0x01, 0xb0, 0x15, 0x5d, 0xe8, 0xd6, 0x49, 0xff, 0x4b, 0xbe, 0x08, 0xf2, 0x98, 0xef, 0x1f,
	0x3e, 0x3b, 0x41, 0x0e, 0x9d, 0x20, 0x3f, 0x9d, 0x20, 0x1f, 0xbd, 0x48, 0x0e, 0xbd, 0x48, 0xbe,
	0x7a, 0x91, 0x3c, 0xdd, 0x15, 0x16, 0xf7, 0xed, 0x2e, 0x53, 0x50, 0xe6, 0xa7, 0xeb, 0x1d, 0x41,
	0xfe, 0x9a, 0x8f, 0x73, 0xe3, 0x5b, 0x6d, 0x9a, 0xdd, 0x2c, 0x54, 0x6e, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xaf, 0x12, 0x12, 0xd2, 0x86, 0x01, 0x00, 0x00,
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Starttime) > 0 {
		i -= len(m.Starttime)
		copy(dAtA[i:], m.Starttime)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Starttime)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Stepprice) > 0 {
		i -= len(m.Stepprice)
		copy(dAtA[i:], m.Stepprice)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Stepprice)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Startprice) > 0 {
		i -= len(m.Startprice)
		copy(dAtA[i:], m.Startprice)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Startprice)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Tokenid) > 0 {
		i -= len(m.Tokenid)
		copy(dAtA[i:], m.Tokenid)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Tokenid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denomid) > 0 {
		i -= len(m.Denomid)
		copy(dAtA[i:], m.Denomid)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Denomid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovOrder(uint64(m.Id))
	}
	l = len(m.Denomid)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Tokenid)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Startprice)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Stepprice)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Starttime)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func sovOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrder(x uint64) (n int) {
	return sovOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Order) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokenid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokenid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Startprice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Startprice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stepprice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stepprice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Starttime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Starttime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrder = fmt.Errorf("proto: unexpected end of group")
)
